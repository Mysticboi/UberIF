package model.graphs.pathfinding;

import model.DeliveryTour;
import model.PlanningRequest;
import model.graphs.Graph;


/**
 * Interface TSP. Represent a TSP solving algorithm.
 */
public interface TSP {
    /**
     * Search for a shortest cost hamiltonian circuit in <code>g</code> within
     * <code>timeLimit</code> milliseconds.
     * (returns the best found tour whenever the time limit is reached)
     * Warning: The computed tour always start from vertex 0
     * @param timeLimit time limit
     * @param g         the graph
     * @param planningRequest the requests with the startingPoint,
     *                        the deliveries and the pickups
     */
    void searchSolution(int timeLimit, Graph g,
                        PlanningRequest planningRequest);

    /**
     * @return the ith visited vertex in the solution computed by
     * <code>searchSolution</code>
     * (-1 if <code>searcheSolution</code> has not been called yet,
     * or if i < 0 or i >= g.getNbSommets())
     */
    String[] getSolution();

    /**
     * @return the total cost of the solution computed by
     * <code>searchSolution</code>
     * (-1 if <code>searcheSolution</code> has not been called yet).
     */
    float getSolutionCost();

    /**
     * @return the delivery tour generated by <code>searchSolution</code>
     */
    DeliveryTour getDeliveryTour();


}
